
env:
    global:
        - secure: "mGz/wRMS1enFS0bhZOnhOb2yWvJaHaywq766+Fy8e0AWEq2QIaeBA5Um/qz/csP8dLPXW66IfWsUmz6gC+DnZqcDNou4upHnVeYeki8dRuMdHciGebrGHyiUbO/WOMtB5X3XfrL+80WP95t2bEUMaO+n8RqA41T5VkPZ3BezvGnAnorVKzsRw93zPh6QqSBqWj71mKMNqOFOoAHsjlmrzD5vPJOp2F3INsq10qbtIF/P8H8ccgN98MaW2l2AqeICv4F08UZoWVrrZggS7eUv+Pvr3YRRGaZ5Ny1gWXbOkmeKWBL2zqdHIvXO0falgtJaZWKUFRucUlKaekY7jlSB4rEoVGSI8xdIDfEZEWLrdVRpkcGil3rmuFTXnl5rXwIuGOcR9sJje1CZejLR1rtOumf3cNbSAJCT8FJr5eYJ6NUl6Gf1z2sDXTY19ZtvLT9OeQr58kEv7ZoW3gvV3CuYQzBZAl9/SfW8G5PIsldAblPMKjWWilbhSa2NJig5x4tt6hpVwll89VdpS62eL7Hfre5ZKFV+TTUOj7wVdF3oXbK2S+/w/2xQD/Fh60oxK/8tiT4ZWAArzjANcTshW03GPiTVBVSyizs6T5LpugjBuLu6th0qdcNCrxRORHujLV/a2uSzejd3yc3rVufkPPmqIJrO/MFHZseuy0IrA7VIN2Y="


        - secure: "QF9Rni2RGXWc3yQq9KKbH+KA+56SwA6q0hQcIc93Yz0XyOuF0AIkDWg4rzP5i90X1bFcocb5YA/eXVm3wZkpXq9EZ4xqtED2WUEbKAzSzXDO43HIzH1nFLwwuQtzedLhwqIXG0cM3aYlR+Et025c93OSG0VdYh/G61m8aoR5k4AoCdYIdwaxjzPh3/BcNW5fExODP3YVJ5/RAeoRkNt5PGRsg/GIZ/rM58ZlEdoqEvjzzPwnAgByy0kowRX3SYK7DGE41vLEP2bcp1DX5UoJawTDpYtHX8we4lKPUL2VHrPr37ZWjZv0qXMp9WUWR5EMMVNOz4HzlhgWPFrAgEgzpozzqKLRLJCYY4eWXdo+7trB+naiGLFFN7KDGsKj5t9OVRz2zX931uAiGJUjoWwm6IG0wrHOIedGw7hW/Lhq67YeYF89S9VR5v3FFZVAUGTcCQVA0lXRDJ54JlXXAd0uFMmPoVgcMaeGzyEdo91sA43rfYBEWVLAdIAaEWgwxt2bSCIxLq/waYVqgrbYNJ3osXYSrv6MF7lEdUy5QpF3yQCShsFr+jkbPRFoTtihjTyLsguuzQovbtFEzp9jkzHte8xM1vT/aa2nsPVaU/Nku9V2+vNPUN/8XcL1vFrRAgXjvJ5fhED2M8NhQj0cfuUk5TQ0Jg19qJIsNmk+BgoTQMI="


        - secure: "RPBmaxKq6Wo6vbs69b2Z961B0Jt5RzE0ZP+6RwRkDeoeilbky/K2ODjFheRUS4P6O5JFWUHFG0xwGU0nHh3xHbRXD1GWUHxYrfRfpLvoeQul8Ut9NKvG0TNhT1stAWmsG8kxAaTHQLyRRMpjwhd8lZpPBdn9KMQ7bBO8k/mlx1R2a9TRpuUqZWCtdkW93g8v/ufYn2L2f/jJdKit+BbqzO/GiafmzJaL7wwdzfOu4h5ucRINg5+C56m5TDWeJt+PxTyFDx4esx2kiykvReDs/9IpZTGB5eD/b8OXPHb2TUOsod2AVKRb58Zar+Jgjdn2HHfKn7mimLaE+WIOqrEFujaIUHm+1gZEe6/rc6I8KTMxKUupvXv0qvmUAnz3ctCdp41WY5zZJZ1q8iQjJ69/RHlum3qpJI65+EQkuE5hXWlZsKJd6s5vvHq4eYkB+D4FzUpzPyrPbZgBKmFjw5ussoYkRULaxsTcbSgUjacJhZKvqfv7hKgD0CZF9kWoOe+KFEm82s4S3PMD+CRvaMFHRUQLtFByhu97zCZPwZLvsmmoHjKO4lZPDKdJlKwLnxiyD1sLG3lka5+C82ZTF8GWgsstra0zOB5oCf7otdseFC2aZGV6UfPXrEb8ZVrpcyLrUYYGgdGNYoxib57nHipr6Z5eEmqhTJKwALvmU8Nh3yU="


dist: trusty
language: python
sudo: false

cache:
  apt: true
  directories:
  - $HOME/.cache/pip
  - $HOME/download

python:
  - "2.7"
  - "3.5"
  - "3.6"
  #
before_install:
  - pip install pip -U
  - pip install -r requirements.txt -U

install:
  - MB_PYTHON_TAG=$(python -c "import setup; print(setup.MB_PYTHON_TAG)")
  - VERSION=$(python -c "import setup; print(setup.VERSION)") 
  - MB_PYTHON_TAG=$MB_PYTHON_TAG travis_retry ./run_multibuild.sh 
  - BDIST_WHEEL_PATH=$(ls wheelhouse/*-$VERSION-$MB_PYTHON_TAG*.whl)
  - echo "BDIST_WHEEL_PATH = $BDIST_WHEEL_PATH"
  - pip install $BDIST_WHEEL_PATH
    
script: 
  - travis_wait cd test && pytest

after_success: 
    - codecov 
    - gpg --version
    - gpg2 --version
    - export GPG_EXECUTABLE=gpg
    - openssl version
    - | 
        __heredoc__='''
        # Load or generate secrets
        source $(secret_loader.sh)
        echo $TWINE_USERNAME
        echo $TWINE_PASSWORD
        echo $CI_GITHUB_SECRET

        # encrypt relevant travis variables
        travis encrypt TWINE_USERNAME=$TWINE_USERNAME 
        travis encrypt TWINE_PASSWORD=$TWINE_PASSWORD  
        travis encrypt CI_GITHUB_SECRET=$CI_GITHUB_SECRET

        # HOW TO ENCRYPT YOUR SECRET GPG KEY
        IDENTIFIER="travis-ci-Erotemic"
        KEYID=$(gpg --list-keys --keyid-format LONG "$IDENTIFIER" | head -n 2 | tail -n 1 | awk '{print $1}' | tail -c 9)
        echo "KEYID = $KEYID"

        # Export plaintext gpg public keys, private keys, and trust info
        mkdir -p dev
        gpg --armor --export-secret-keys $KEYID > dev/travis_secret_gpg_key.pgp
        gpg --armor --export $KEYID > dev/travis_public_gpg_key.pgp
        gpg --export-ownertrust > dev/gpg_owner_trust

        # Encrypt gpg keys and trust with travis secret
        TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_public_gpg_key.pgp > dev/travis_public_gpg_key.pgp.enc
        TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_secret_gpg_key.pgp > dev/travis_secret_gpg_key.pgp.enc
        TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/gpg_owner_trust > dev/gpg_owner_trust.enc

        source $(secret_unloader.sh)

        # Look at what we did, clean up, and add it to git
        ls dev/*.enc
        rm dev/gpg_owner_trust dev/*.pgp
        git status
        git add dev/*.enc

        '''  # <hack vim "regex" parser> '
    - |
        # Install a more recent version of GPG
        # https://gnupg.org/download/
        export TMP_PREFIX=$HOME/tmp_prefix
        export LD_LIBRARY_PATH=$TMP_PREFIX/lib:$LD_LIBRARY_PATH
        export PATH=$TMP_PREFIX/bin:$PATH
        export CPATH=$TMP_PREFIX/include:$CPATH
    # Decrypt and import GPG Keys / trust
    - $GPG_EXECUTABLE --version
    - openssl version
    - $GPG_EXECUTABLE --list-keys
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - $GPG_EXECUTABLE --list-keys
    - MB_PYTHON_TAG=$(python -c "import setup; print(setup.MB_PYTHON_TAG)")
    - VERSION=$(python -c "import setup; print(setup.VERSION)") 
    - |
        pip install twine
        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
          pip install six pyopenssl ndg-httpsclient pyasn1 -U --user
          pip install requests[security] twine --user
        elfi
        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          pip install six twine
          pip install --upgrade pyOpenSSL
        fi
    # Package and publish to pypi (if on release)
    - |
        echo "TRAVIS_BRANCH = $TRAVIS_BRANCH"
        if [[ "$TRAVIS_BRANCH" == "release" ]]; then
            # use set +x to log all intermediate commands 
            set +x
            export CURRENT_BRANCH=$TRAVIS_BRANCH
            # TODO: reliable and secure gpg keys
            # Relies on a specific environmenmt being available 
            git config --global user.signingkey D297D757
            git config --local user.signingkey D297D757
            # git config --global gpg.program
            MB_PYTHON_TAG=$MB_PYTHON_TAG GPG_KEYID=D297D757 CURRENT_BRANCH=$TRAVIS_BRANCH TWINE_PASSWORD=$TWINE_PASSWORD TWINE_USERNAME=$TWINE_USERNAME GPG_EXECUTABLE=$GPG_EXECUTABLE USE_GPG=True DEPLOY_BRANCH=release TAG_AND_UPLOAD=yes ./publish.sh
            set -x
        else
            MB_PYTHON_TAG=$MB_PYTHON_TAG GPG_KEYID=D297D757 CURRENT_BRANCH=$TRAVIS_BRANCH TWINE_PASSWORD=$TWINE_PASSWORD TWINE_USERNAME=$TWINE_USERNAME GPG_EXECUTABLE=$GPG_EXECUTABLE USE_GPG=True DEPLOY_BRANCH=release TAG_AND_UPLOAD=no ./publish.sh
        fi

cache: 
    apt: true
    directories:
        - $HOME/.pip-cache

