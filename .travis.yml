
env:
    global:
        - secure: "dhtcnIFPpCgaRucwv/Y8IKZcEb1C0tS83W6Z9hu/xD4eKo5dlhThiniLiUL/swxABc5flWTmASAZSi4GEZgz5cNIvZ3ZZ78WQr4zvB7FpdvhdOWu3LVt9ANvnEzl1LHZxhLMjGcJeJfYEJv85pqZ/6ySx0pXG1JFDcbbhBItYL3Upb88GPHygxn68lUM4cVLKqXWLMBGUSWaYJuv61NEcibdStntQRBzaHY6firNaj+1zqVLqSoE8GoV1T2CEuI9qaoIGtNphOggfROzfq3w7YXaE8Uq8pK/0lD+nGdIDW62/dmQnFDoSFWRcTjUvLc3WstSLdIzRjHPdY/wRtoLk7mUsqAzHQ0oIY2aTQ9bYCIfblnJxpHYwksP4GhWzEqoDa4rJnQyMr0+oEGQiya+AFUAGJxTqJMO8LNGBDUasB3qhRi9Tu0i5eVEzpewhRRPXbZ1PvqRTmg98wqyvYr874+xqw9Nn9IbT+fFgK6+inBoaKv8k2zUZX/4YYtdKyZu7RBwEDsFKibsUMBqz9AquAcqYGPK+//vDR7A4N+buzOG6JLzgsxSPnHpG8QAOAS9kUKSGhtdJjmNx3lvjDxLvpBuSKSczsHxBljO3XewaviKAKD+POIG1eCsj8B8NdwupPJpev4o3h+gH/1PO5AzTpVtFhrUZYyG1KqDmn23iNA="

        - secure: "PDxqRpNhaOr2a+morKTM3+vk5614vTuY9lZ7ZpZUOFqNiolFVjLD2tYEUH2iZibRN2ciyB7EQULnfsvsTXlO0uftPVfuSrGKOQPZzBQmzTihwqoOQJJZnLRk/pqnbZUzUtjnTM3Nccv1TY1BYmqN+KNRZvTL+trdeM5yYGLXLizJ0Z44J/6Vk4y8spGwlZ7mShsUiPbMDTF37qsWdZtNIJZFUCdDeDdLwY1LzseVXjMMg6AwsCd2ddtKnHxN+vnXjycFuhoBGjkt0CxZE6Ksb9FvlsjT8dZd11a4W4cr3suvhHDRh9ScRWjZnghuP2ai7GuC7TXnfLsSw722Drmzw8/Bg9+SxvgcqsJJ49c33cMGMLf5WbJdK4SMfji0OchmTKrDlWWERYsjxg6bu/O4STnF87OplnCeKL7tcGxvXazC8WIqqLxY//nlaFoEQZ3Cy8JF8KEwUk48CSbajSrORIXnZsIFPRG8I+xHvbc+EkJqnhLg5T0M+wEMpleSxdUV10h9I6FIBPiSu3prKEdi6gBp0uNMevn419n6C8QnlkH0vuBQDXj/6jgUfJgaZnsX2sNiAn9ahExFz1SUGUVgN/XWzddajOaXvetpUpReKboZ+Pqq54CCNENXhdVqJ02XwI/aiVp+Wx+iLQkVlpJKC28F57dY+0oH3Su34R12ztY="

        - secure: "ObkWOsIH7D4ZjhflwlVWdE0sZslaEHzkp/DiUYycaCwdeAsw8Nlt2zFdKGf46M5vSvciamuHRQkgi5puNxX+S6oRHtYBkFFXT7lJ+i4mE+xi/6pKrBYwfTCioeb1xWoDNBNN9al/cveLDJ1VR4xapu7A060DEDLzx09+K/geWfrjilCI5iW3jvTtd1dUj1/jdzF5CR63ly79qZrTP0WGJf04rdZuEUYwlVfABgxpa/wu6ZaoMm8DS1+t/RGC1MfUfyV/HIhHD95sOM9nB5I7onjiTn+xZgJLUxfKtpzSGN6Ff5Wx8psxyO/QohsiugUt/bKZ9BiaRsDe0nKL83jPGG8j22rpXnwTFZ9iZ3CvEI/0uub0RecOdFLDro3IQ5YlJjmdbzCUT03KqqJcTZzVZUEWIjTCdb6VtiQbqIXEs4BVnxOTa9Hm9lJxDR2topgfrzgKSo4ZBQ/L/NuK3O1+S/2ldBJSG7SPT0vEniIShCexaP38/blqeU5BmSL8LrEv/Mb0FrDnTRKKCCGGW+1xPi7bmqVWKkqeMaESsNEJJx2IXUQ/nkvh2CmPV7RFl4Udgb1xlNKCBP3TuVhhMG/PPC+Csh53dqDFI2VwIrC0xYuPWgWVkyAcEJwd+LCzg+HqljXMmEe1uVN6ss6fdiAvwo278Cu/EMx6J9hNwijLdts="


dist: trusty
language: python
sudo: false

cache:
  apt: true
  directories:
  - $HOME/.cache/pip
  - $HOME/download

python:
  - "2.7"
  - "3.5"
  - "3.6"
  #
before_install:
  - pip install pip -U
  - pip install -r requirements.txt -U

install:
  - MB_PYTHON_TAG=$(python -c "import setup; print(setup.MB_PYTHON_TAG)")
  - VERSION=$(python -c "import setup; print(setup.VERSION)") 
  - MB_PYTHON_TAG=$MB_PYTHON_TAG travis_retry ./run_multibuild.sh 
  - BDIST_WHEEL_PATH=$(ls wheelhouse/*-$VERSION-$MB_PYTHON_TAG*.whl)
  - echo "BDIST_WHEEL_PATH = $BDIST_WHEEL_PATH"
  - pip install $BDIST_WHEEL_PATH
    
script: 
  - travis_wait cd test && pytest

after_success: 
    - codecov 
    - gpg --version
    - gpg2 --version
    - export GPG_EXECUTABLE=gpg
    - openssl version
    - | 
        __heredoc__='''
        # Load or generate secrets
        source $(secret_loader.sh)
        echo $TWINE_USERNAME
        echo $TWINE_PASSWORD
        echo $CI_GITHUB_SECRET

        # encrypt relevant travis variables
        travis encrypt TWINE_USERNAME=$TWINE_USERNAME 
        travis encrypt TWINE_PASSWORD=$TWINE_PASSWORD  
        travis encrypt CI_GITHUB_SECRET=$CI_GITHUB_SECRET

        # HOW TO ENCRYPT YOUR SECRET GPG KEY
        IDENTIFIER="travis-ci-Erotemic"
        KEYID=$(gpg --list-keys --keyid-format LONG "$IDENTIFIER" | head -n 2 | tail -n 1 | awk '{print $1}' | tail -c 9)
        echo "KEYID = $KEYID"

        # Export plaintext gpg public keys, private keys, and trust info
        mkdir -p dev
        gpg --armor --export-secret-keys $KEYID > dev/travis_secret_gpg_key.pgp
        gpg --armor --export $KEYID > dev/travis_public_gpg_key.pgp
        gpg --export-ownertrust > dev/gpg_owner_trust

        # Encrypt gpg keys and trust with travis secret
        TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -pbkdf2 -md MD5 -pass env:TSP -e -a -in dev/travis_public_gpg_key.pgp > dev/travis_public_gpg_key.pgp.enc
        TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -pbkdf2 -md MD5 -pass env:TSP -e -a -in dev/travis_secret_gpg_key.pgp > dev/travis_secret_gpg_key.pgp.enc
        TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -pbkdf2 -md MD5 -pass env:TSP -e -a -in dev/gpg_owner_trust > dev/gpg_owner_trust.enc

        source $(secret_unloader.sh)

        # Look at what we did, clean up, and add it to git
        ls dev/*.enc
        rm dev/gpg_owner_trust dev/*.pgp
        git status
        git add dev/*.enc

        '''  # <hack vim "regex" parser> '
    - |
        # Install a more recent version of GPG
        # https://gnupg.org/download/
        export TMP_PREFIX=$HOME/tmp_prefix
        export LD_LIBRARY_PATH=$TMP_PREFIX/lib:$LD_LIBRARY_PATH
        export PATH=$TMP_PREFIX/bin:$PATH
        export CPATH=$TMP_PREFIX/include:$CPATH
    # Decrypt and import GPG Keys / trust
    - $GPG_EXECUTABLE --version
    - openssl version
    - $GPG_EXECUTABLE --list-keys
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pbkdf2 -pass env:TSP -d -a -in dev/travis_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pbkdf2 -pass env:TSP -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pbkdf2 -pass env:TSP -d -a -in dev/travis_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - $GPG_EXECUTABLE --list-keys
    - MB_PYTHON_TAG=$(python -c "import setup; print(setup.MB_PYTHON_TAG)")
    - VERSION=$(python -c "import setup; print(setup.VERSION)") 
    - |
        pip install twine
        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
          pip install six pyopenssl ndg-httpsclient pyasn1 -U --user
          pip install requests[security] twine --user
        elfi
        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          pip install six twine
          pip install --upgrade pyOpenSSL
        fi
    # Package and publish to pypi (if on release)
    - |
        echo "TRAVIS_BRANCH = $TRAVIS_BRANCH"
        if [[ "$TRAVIS_BRANCH" == "release" ]]; then
            # use set +x to log all intermediate commands 
            set +x
            export CURRENT_BRANCH=$TRAVIS_BRANCH
            # TODO: reliable and secure gpg keys
            # Relies on a specific environmenmt being available 
            git config --global user.signingkey D297D757
            git config --local user.signingkey D297D757
            # git config --global gpg.program
            MB_PYTHON_TAG=$MB_PYTHON_TAG GPG_KEYID=D297D757 CURRENT_BRANCH=$TRAVIS_BRANCH TWINE_PASSWORD=$TWINE_PASSWORD TWINE_USERNAME=$TWINE_USERNAME GPG_EXECUTABLE=$GPG_EXECUTABLE USE_GPG=True DEPLOY_BRANCH=release TAG_AND_UPLOAD=yes ./publish.sh
            set -x
        else
            MB_PYTHON_TAG=$MB_PYTHON_TAG GPG_KEYID=D297D757 CURRENT_BRANCH=$TRAVIS_BRANCH TWINE_PASSWORD=$TWINE_PASSWORD TWINE_USERNAME=$TWINE_USERNAME GPG_EXECUTABLE=$GPG_EXECUTABLE USE_GPG=True DEPLOY_BRANCH=release TAG_AND_UPLOAD=no ./publish.sh
        fi

cache: 
    apt: true
    directories:
        - $HOME/.pip-cache

